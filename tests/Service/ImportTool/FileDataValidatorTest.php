<?php

declare(strict_types=1);

namespace App\Tests\Service\ImportTool;

use App\Entity\Product;
use App\Repository\ProductRepository;
use App\Service\Reporter\FileImportReporter;
use App\Service\ImportTool\FileDataValidator;
use PHPUnit\Framework\TestCase;

class FileDataValidatorTest extends TestCase
{
    /**
     * @var FileDataValidator
     */
    private $validator;

    /**
     * @var array
     */
    private $dataToValidate;

    /**
     * @var FileImportReporter
     */
    private $reporter;

    /**
     * @var \PHPUnit\Framework\MockObject\MockObject
     */
    private $mockProductRepository;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->mockProductRepository = $this->getMockBuilder(ProductRepository::class)
                                ->disableOriginalConstructor()
                                ->setMethods(['FindOneBy'])
                                ->getMock();

        $this->reporter = new FileImportReporter();

        $this->validator = new FileDataValidator($this->reporter, $this->mockProductRepository);
    }

    /**
     * @param $name
     * @param $description
     * @param $code
     * @param $discontinued
     * @param $stock
     * @param $cost
     *
     * @param $result
     * @param $message
     * @dataProvider provideInvalidDataToValidate
     */
    public function testValidateInvalidProducts($name, $description, $code, $discontinued, $stock, $cost, $result, $message)
    {
        $this->dataToValidate[FileDataValidator::PRODUCT_NAME_COLUMN] = $name;
        $this->dataToValidate[FileDataValidator::PRODUCT_DESCRIPTION_COLUMN] = $description;
        $this->dataToValidate[FileDataValidator::PRODUCT_CODE_COLUMN] = $code;
        $this->dataToValidate[FileDataValidator::PRODUCT_STOCK_COLUMN] = $stock;
        $this->dataToValidate[FileDataValidator::PRODUCT_COST_COLUMN] = $cost;
        $this->dataToValidate[FileDataValidator::PRODUCT_DISCONTINUED_COLUMN] = $discontinued;

        $this->mockProductRepository->expects($this->any())
            ->method('findOneBy')
            ->willReturnCallback(
                function () use ($code){
                    if ('P00050' === $code) {
                        return new Product('First one', 'ddd', 'P00050', 10, 20, true);
                    }
                    return null;
                }
            );

        $isValid = $this->validator->validate($this->dataToValidate);

        $this->assertSame($isValid, $result);
        if ($result != true) {
        $isMessage = false;
            foreach ($this->reporter->getMessages() as $msg){
                if ($message === $msg){
                    $isMessage = true;
                }
            }
            $this->assertSame(true, $isMessage);
        }
    }

    public function provideInvalidDataToValidate()
    {
        return[
            [null, 'description-1', 'P00011000', '', 9, 100, false, 'Invalid product name'],
            ['Some name', null, 'P000250', 'yes', 9, 100, false, 'Invalid product description'],
            ['Some Other name', 'description-1.1', null, 'yes', 9, 100, false, 'Invalid product code'],
            ['Invalid Product', 'because of cost and stock', 'P0003000', '', 4, 3, false, 'Stock and cost are less than rule'],
            ['Tv', 'Desc.', 'P000400000', '', 0, 120000, false, 'Cost is more than rule'],
            ['name0', 'description0', 'P00055', 'yes', 9, 100, true, null],
            ['name1', 'description1', 'P000666', '', 5, 11, true, null],
            ['Valid Product', 'Descr.', 'P00070', '', 20, 10,true, null],
            ['name2', 'description2', 'P00088', '', 90, 10, true, null],
            ['name3', 'description3', 'P00099', 'no', 131, 115, true, null],
            ['name4', 'description4', 'P00050', 'no', 131, 115, false, 'This product already exists'],
        ];
    }
}
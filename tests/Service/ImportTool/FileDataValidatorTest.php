<?php

declare(strict_types=1);

namespace App\Tests\Service\ImportTool;

use App\Repository\ProductRepository;
use App\Service\Reporter\FileImportReporter;
use App\Service\ImportTool\FileDataValidator;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class FileDataValidatorTest extends TestCase
{
    /**
     * @var FileDataValidator
     */
    private $validator;

    /**
     * @var array
     */
    private $dataToValidate;

    /**
     * @var FileImportReporter
     */
    private $reporter;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $mockProductRepository = $this->getMockBuilder(ProductRepository::class)
                                ->disableOriginalConstructor()
                                ->getMock();

        $this->reporter = new FileImportReporter();

        $this->validator = new FileDataValidator($this->reporter, $mockProductRepository);
    }

    /**
     * @param $name
     * @param $description
     * @param $code
     * @param $discontinued
     * @param $stock
     * @param $cost
     *
     * @param $result
     * @param $message
     * @dataProvider provideInvalidDataToValidate
     */
    public function testValidateInvalidProducts($name, $description, $code, $discontinued, $stock, $cost, $result, $message)
    {
        $this->dataToValidate[FileDataValidator::PRODUCT_NAME_COLUMN] = $name;
        $this->dataToValidate[FileDataValidator::PRODUCT_DESCRIPTION_COLUMN] = $description;
        $this->dataToValidate[FileDataValidator::PRODUCT_CODE_COLUMN] = $code;
        $this->dataToValidate[FileDataValidator::PRODUCT_STOCK_COLUMN] = $stock;
        $this->dataToValidate[FileDataValidator::PRODUCT_COST_COLUMN] = $cost;
        $this->dataToValidate[FileDataValidator::PRODUCT_DISCONTINUED_COLUMN] = $discontinued;

        $isValid = $this->validator->validate($this->dataToValidate);

        $this->assertSame($isValid, $result);
        if ($result != true) {
        $isMessage = false;
            foreach ($this->reporter->getMessages() as $msg){
                if ($message === $msg){
                    $isMessage = true;
                }
            }
            $this->assertSame(true, $isMessage);
        }
    }

    public function provideInvalidDataToValidate()
    {
        return[
            [null, 'description', 'P0001', '', 9, 100, false, 'Invalid product name'],
            ['name', null, 'P0002', 'yes', 9, 100, false, 'Invalid product description'],
            ['name', 'description', null, 'yes', 9, 100, false, 'Invalid product code'],
            ['Invalid Product', 'because of cost and stock', 'P0003', '', 4, 3, false, 'Stock and cost are less than rule'],
            ['name', 'Desc.', 'P0004', '', 0, 120000, false, 'Cost is more than rule'],
            ['name', 'description', 'P0005', 'yes', 9, 100, true, null],
            ['name', 'description', 'P0006', '', 5, 11, true, null],
            ['Valid Product', 'Descr.', 'P0007', '', 20, 10,true, null],
            ['name', 'description', 'P0008', '', 90, 10, true, null],
            ['name', 'description', 'P0009', 'no', 131, 115,true, null],
        ];
    }
}